// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package repository

import (
	"context"
	"tiketo/entity"

	mock "github.com/stretchr/testify/mock"
	"gorm.io/gorm"
)

// NewMockOrderDetailRepository creates a new instance of MockOrderDetailRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOrderDetailRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOrderDetailRepository {
	mock := &MockOrderDetailRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockOrderDetailRepository is an autogenerated mock type for the OrderDetailRepositoryInterface type
type MockOrderDetailRepository struct {
	mock.Mock
}

type MockOrderDetailRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOrderDetailRepository) EXPECT() *MockOrderDetailRepository_Expecter {
	return &MockOrderDetailRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockOrderDetailRepository
func (_mock *MockOrderDetailRepository) Create(context1 context.Context, dB *gorm.DB, orderDetail *entity.OrderDetail) error {
	ret := _mock.Called(context1, dB, orderDetail)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *gorm.DB, *entity.OrderDetail) error); ok {
		r0 = returnFunc(context1, dB, orderDetail)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockOrderDetailRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockOrderDetailRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - context1 context.Context
//   - dB *gorm.DB
//   - orderDetail *entity.OrderDetail
func (_e *MockOrderDetailRepository_Expecter) Create(context1 interface{}, dB interface{}, orderDetail interface{}) *MockOrderDetailRepository_Create_Call {
	return &MockOrderDetailRepository_Create_Call{Call: _e.mock.On("Create", context1, dB, orderDetail)}
}

func (_c *MockOrderDetailRepository_Create_Call) Run(run func(context1 context.Context, dB *gorm.DB, orderDetail *entity.OrderDetail)) *MockOrderDetailRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *gorm.DB
		if args[1] != nil {
			arg1 = args[1].(*gorm.DB)
		}
		var arg2 *entity.OrderDetail
		if args[2] != nil {
			arg2 = args[2].(*entity.OrderDetail)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockOrderDetailRepository_Create_Call) Return(err error) *MockOrderDetailRepository_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockOrderDetailRepository_Create_Call) RunAndReturn(run func(context1 context.Context, dB *gorm.DB, orderDetail *entity.OrderDetail) error) *MockOrderDetailRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockOrderDetailRepository
func (_mock *MockOrderDetailRepository) Delete(context1 context.Context, dB *gorm.DB, orderDetail *entity.OrderDetail) error {
	ret := _mock.Called(context1, dB, orderDetail)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *gorm.DB, *entity.OrderDetail) error); ok {
		r0 = returnFunc(context1, dB, orderDetail)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockOrderDetailRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockOrderDetailRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - context1 context.Context
//   - dB *gorm.DB
//   - orderDetail *entity.OrderDetail
func (_e *MockOrderDetailRepository_Expecter) Delete(context1 interface{}, dB interface{}, orderDetail interface{}) *MockOrderDetailRepository_Delete_Call {
	return &MockOrderDetailRepository_Delete_Call{Call: _e.mock.On("Delete", context1, dB, orderDetail)}
}

func (_c *MockOrderDetailRepository_Delete_Call) Run(run func(context1 context.Context, dB *gorm.DB, orderDetail *entity.OrderDetail)) *MockOrderDetailRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *gorm.DB
		if args[1] != nil {
			arg1 = args[1].(*gorm.DB)
		}
		var arg2 *entity.OrderDetail
		if args[2] != nil {
			arg2 = args[2].(*entity.OrderDetail)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockOrderDetailRepository_Delete_Call) Return(err error) *MockOrderDetailRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockOrderDetailRepository_Delete_Call) RunAndReturn(run func(context1 context.Context, dB *gorm.DB, orderDetail *entity.OrderDetail) error) *MockOrderDetailRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function for the type MockOrderDetailRepository
func (_mock *MockOrderDetailRepository) Save(context1 context.Context, dB *gorm.DB, orderDetail *entity.OrderDetail) error {
	ret := _mock.Called(context1, dB, orderDetail)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *gorm.DB, *entity.OrderDetail) error); ok {
		r0 = returnFunc(context1, dB, orderDetail)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockOrderDetailRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockOrderDetailRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - context1 context.Context
//   - dB *gorm.DB
//   - orderDetail *entity.OrderDetail
func (_e *MockOrderDetailRepository_Expecter) Save(context1 interface{}, dB interface{}, orderDetail interface{}) *MockOrderDetailRepository_Save_Call {
	return &MockOrderDetailRepository_Save_Call{Call: _e.mock.On("Save", context1, dB, orderDetail)}
}

func (_c *MockOrderDetailRepository_Save_Call) Run(run func(context1 context.Context, dB *gorm.DB, orderDetail *entity.OrderDetail)) *MockOrderDetailRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *gorm.DB
		if args[1] != nil {
			arg1 = args[1].(*gorm.DB)
		}
		var arg2 *entity.OrderDetail
		if args[2] != nil {
			arg2 = args[2].(*entity.OrderDetail)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockOrderDetailRepository_Save_Call) Return(err error) *MockOrderDetailRepository_Save_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockOrderDetailRepository_Save_Call) RunAndReturn(run func(context1 context.Context, dB *gorm.DB, orderDetail *entity.OrderDetail) error) *MockOrderDetailRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// Take provides a mock function for the type MockOrderDetailRepository
func (_mock *MockOrderDetailRepository) Take(context1 context.Context, dB *gorm.DB, orderDetail *entity.OrderDetail) error {
	ret := _mock.Called(context1, dB, orderDetail)

	if len(ret) == 0 {
		panic("no return value specified for Take")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *gorm.DB, *entity.OrderDetail) error); ok {
		r0 = returnFunc(context1, dB, orderDetail)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockOrderDetailRepository_Take_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Take'
type MockOrderDetailRepository_Take_Call struct {
	*mock.Call
}

// Take is a helper method to define mock.On call
//   - context1 context.Context
//   - dB *gorm.DB
//   - orderDetail *entity.OrderDetail
func (_e *MockOrderDetailRepository_Expecter) Take(context1 interface{}, dB interface{}, orderDetail interface{}) *MockOrderDetailRepository_Take_Call {
	return &MockOrderDetailRepository_Take_Call{Call: _e.mock.On("Take", context1, dB, orderDetail)}
}

func (_c *MockOrderDetailRepository_Take_Call) Run(run func(context1 context.Context, dB *gorm.DB, orderDetail *entity.OrderDetail)) *MockOrderDetailRepository_Take_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *gorm.DB
		if args[1] != nil {
			arg1 = args[1].(*gorm.DB)
		}
		var arg2 *entity.OrderDetail
		if args[2] != nil {
			arg2 = args[2].(*entity.OrderDetail)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockOrderDetailRepository_Take_Call) Return(err error) *MockOrderDetailRepository_Take_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockOrderDetailRepository_Take_Call) RunAndReturn(run func(context1 context.Context, dB *gorm.DB, orderDetail *entity.OrderDetail) error) *MockOrderDetailRepository_Take_Call {
	_c.Call.Return(run)
	return _c
}

// TakeForUpdate provides a mock function for the type MockOrderDetailRepository
func (_mock *MockOrderDetailRepository) TakeForUpdate(context1 context.Context, dB *gorm.DB, orderDetail *entity.OrderDetail) error {
	ret := _mock.Called(context1, dB, orderDetail)

	if len(ret) == 0 {
		panic("no return value specified for TakeForUpdate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *gorm.DB, *entity.OrderDetail) error); ok {
		r0 = returnFunc(context1, dB, orderDetail)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockOrderDetailRepository_TakeForUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TakeForUpdate'
type MockOrderDetailRepository_TakeForUpdate_Call struct {
	*mock.Call
}

// TakeForUpdate is a helper method to define mock.On call
//   - context1 context.Context
//   - dB *gorm.DB
//   - orderDetail *entity.OrderDetail
func (_e *MockOrderDetailRepository_Expecter) TakeForUpdate(context1 interface{}, dB interface{}, orderDetail interface{}) *MockOrderDetailRepository_TakeForUpdate_Call {
	return &MockOrderDetailRepository_TakeForUpdate_Call{Call: _e.mock.On("TakeForUpdate", context1, dB, orderDetail)}
}

func (_c *MockOrderDetailRepository_TakeForUpdate_Call) Run(run func(context1 context.Context, dB *gorm.DB, orderDetail *entity.OrderDetail)) *MockOrderDetailRepository_TakeForUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *gorm.DB
		if args[1] != nil {
			arg1 = args[1].(*gorm.DB)
		}
		var arg2 *entity.OrderDetail
		if args[2] != nil {
			arg2 = args[2].(*entity.OrderDetail)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockOrderDetailRepository_TakeForUpdate_Call) Return(err error) *MockOrderDetailRepository_TakeForUpdate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockOrderDetailRepository_TakeForUpdate_Call) RunAndReturn(run func(context1 context.Context, dB *gorm.DB, orderDetail *entity.OrderDetail) error) *MockOrderDetailRepository_TakeForUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockOrderDetailRepository
func (_mock *MockOrderDetailRepository) Update(context1 context.Context, dB *gorm.DB, orderDetail *entity.OrderDetail) error {
	ret := _mock.Called(context1, dB, orderDetail)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *gorm.DB, *entity.OrderDetail) error); ok {
		r0 = returnFunc(context1, dB, orderDetail)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockOrderDetailRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockOrderDetailRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - context1 context.Context
//   - dB *gorm.DB
//   - orderDetail *entity.OrderDetail
func (_e *MockOrderDetailRepository_Expecter) Update(context1 interface{}, dB interface{}, orderDetail interface{}) *MockOrderDetailRepository_Update_Call {
	return &MockOrderDetailRepository_Update_Call{Call: _e.mock.On("Update", context1, dB, orderDetail)}
}

func (_c *MockOrderDetailRepository_Update_Call) Run(run func(context1 context.Context, dB *gorm.DB, orderDetail *entity.OrderDetail)) *MockOrderDetailRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *gorm.DB
		if args[1] != nil {
			arg1 = args[1].(*gorm.DB)
		}
		var arg2 *entity.OrderDetail
		if args[2] != nil {
			arg2 = args[2].(*entity.OrderDetail)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockOrderDetailRepository_Update_Call) Return(err error) *MockOrderDetailRepository_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockOrderDetailRepository_Update_Call) RunAndReturn(run func(context1 context.Context, dB *gorm.DB, orderDetail *entity.OrderDetail) error) *MockOrderDetailRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}
