// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package repository

import (
	"context"
	"tiketo/entity"

	mock "github.com/stretchr/testify/mock"
	"gorm.io/gorm"
)

// NewMockOrderRepository creates a new instance of MockOrderRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOrderRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOrderRepository {
	mock := &MockOrderRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockOrderRepository is an autogenerated mock type for the OrderRepositoryInterface type
type MockOrderRepository struct {
	mock.Mock
}

type MockOrderRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOrderRepository) EXPECT() *MockOrderRepository_Expecter {
	return &MockOrderRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockOrderRepository
func (_mock *MockOrderRepository) Create(context1 context.Context, dB *gorm.DB, order *entity.Order) error {
	ret := _mock.Called(context1, dB, order)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *gorm.DB, *entity.Order) error); ok {
		r0 = returnFunc(context1, dB, order)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockOrderRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockOrderRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - context1 context.Context
//   - dB *gorm.DB
//   - order *entity.Order
func (_e *MockOrderRepository_Expecter) Create(context1 interface{}, dB interface{}, order interface{}) *MockOrderRepository_Create_Call {
	return &MockOrderRepository_Create_Call{Call: _e.mock.On("Create", context1, dB, order)}
}

func (_c *MockOrderRepository_Create_Call) Run(run func(context1 context.Context, dB *gorm.DB, order *entity.Order)) *MockOrderRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *gorm.DB
		if args[1] != nil {
			arg1 = args[1].(*gorm.DB)
		}
		var arg2 *entity.Order
		if args[2] != nil {
			arg2 = args[2].(*entity.Order)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockOrderRepository_Create_Call) Return(err error) *MockOrderRepository_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockOrderRepository_Create_Call) RunAndReturn(run func(context1 context.Context, dB *gorm.DB, order *entity.Order) error) *MockOrderRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockOrderRepository
func (_mock *MockOrderRepository) Delete(context1 context.Context, dB *gorm.DB, order *entity.Order) error {
	ret := _mock.Called(context1, dB, order)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *gorm.DB, *entity.Order) error); ok {
		r0 = returnFunc(context1, dB, order)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockOrderRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockOrderRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - context1 context.Context
//   - dB *gorm.DB
//   - order *entity.Order
func (_e *MockOrderRepository_Expecter) Delete(context1 interface{}, dB interface{}, order interface{}) *MockOrderRepository_Delete_Call {
	return &MockOrderRepository_Delete_Call{Call: _e.mock.On("Delete", context1, dB, order)}
}

func (_c *MockOrderRepository_Delete_Call) Run(run func(context1 context.Context, dB *gorm.DB, order *entity.Order)) *MockOrderRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *gorm.DB
		if args[1] != nil {
			arg1 = args[1].(*gorm.DB)
		}
		var arg2 *entity.Order
		if args[2] != nil {
			arg2 = args[2].(*entity.Order)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockOrderRepository_Delete_Call) Return(err error) *MockOrderRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockOrderRepository_Delete_Call) RunAndReturn(run func(context1 context.Context, dB *gorm.DB, order *entity.Order) error) *MockOrderRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// FindAllOrderHistoryUser provides a mock function for the type MockOrderRepository
func (_mock *MockOrderRepository) FindAllOrderHistoryUser(context1 context.Context, dB *gorm.DB, orders *[]entity.Order, s string) error {
	ret := _mock.Called(context1, dB, orders, s)

	if len(ret) == 0 {
		panic("no return value specified for FindAllOrderHistoryUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *gorm.DB, *[]entity.Order, string) error); ok {
		r0 = returnFunc(context1, dB, orders, s)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockOrderRepository_FindAllOrderHistoryUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAllOrderHistoryUser'
type MockOrderRepository_FindAllOrderHistoryUser_Call struct {
	*mock.Call
}

// FindAllOrderHistoryUser is a helper method to define mock.On call
//   - context1 context.Context
//   - dB *gorm.DB
//   - orders *[]entity.Order
//   - s string
func (_e *MockOrderRepository_Expecter) FindAllOrderHistoryUser(context1 interface{}, dB interface{}, orders interface{}, s interface{}) *MockOrderRepository_FindAllOrderHistoryUser_Call {
	return &MockOrderRepository_FindAllOrderHistoryUser_Call{Call: _e.mock.On("FindAllOrderHistoryUser", context1, dB, orders, s)}
}

func (_c *MockOrderRepository_FindAllOrderHistoryUser_Call) Run(run func(context1 context.Context, dB *gorm.DB, orders *[]entity.Order, s string)) *MockOrderRepository_FindAllOrderHistoryUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *gorm.DB
		if args[1] != nil {
			arg1 = args[1].(*gorm.DB)
		}
		var arg2 *[]entity.Order
		if args[2] != nil {
			arg2 = args[2].(*[]entity.Order)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockOrderRepository_FindAllOrderHistoryUser_Call) Return(err error) *MockOrderRepository_FindAllOrderHistoryUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockOrderRepository_FindAllOrderHistoryUser_Call) RunAndReturn(run func(context1 context.Context, dB *gorm.DB, orders *[]entity.Order, s string) error) *MockOrderRepository_FindAllOrderHistoryUser_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function for the type MockOrderRepository
func (_mock *MockOrderRepository) Save(context1 context.Context, dB *gorm.DB, order *entity.Order) error {
	ret := _mock.Called(context1, dB, order)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *gorm.DB, *entity.Order) error); ok {
		r0 = returnFunc(context1, dB, order)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockOrderRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockOrderRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - context1 context.Context
//   - dB *gorm.DB
//   - order *entity.Order
func (_e *MockOrderRepository_Expecter) Save(context1 interface{}, dB interface{}, order interface{}) *MockOrderRepository_Save_Call {
	return &MockOrderRepository_Save_Call{Call: _e.mock.On("Save", context1, dB, order)}
}

func (_c *MockOrderRepository_Save_Call) Run(run func(context1 context.Context, dB *gorm.DB, order *entity.Order)) *MockOrderRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *gorm.DB
		if args[1] != nil {
			arg1 = args[1].(*gorm.DB)
		}
		var arg2 *entity.Order
		if args[2] != nil {
			arg2 = args[2].(*entity.Order)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockOrderRepository_Save_Call) Return(err error) *MockOrderRepository_Save_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockOrderRepository_Save_Call) RunAndReturn(run func(context1 context.Context, dB *gorm.DB, order *entity.Order) error) *MockOrderRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// Take provides a mock function for the type MockOrderRepository
func (_mock *MockOrderRepository) Take(context1 context.Context, dB *gorm.DB, order *entity.Order) error {
	ret := _mock.Called(context1, dB, order)

	if len(ret) == 0 {
		panic("no return value specified for Take")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *gorm.DB, *entity.Order) error); ok {
		r0 = returnFunc(context1, dB, order)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockOrderRepository_Take_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Take'
type MockOrderRepository_Take_Call struct {
	*mock.Call
}

// Take is a helper method to define mock.On call
//   - context1 context.Context
//   - dB *gorm.DB
//   - order *entity.Order
func (_e *MockOrderRepository_Expecter) Take(context1 interface{}, dB interface{}, order interface{}) *MockOrderRepository_Take_Call {
	return &MockOrderRepository_Take_Call{Call: _e.mock.On("Take", context1, dB, order)}
}

func (_c *MockOrderRepository_Take_Call) Run(run func(context1 context.Context, dB *gorm.DB, order *entity.Order)) *MockOrderRepository_Take_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *gorm.DB
		if args[1] != nil {
			arg1 = args[1].(*gorm.DB)
		}
		var arg2 *entity.Order
		if args[2] != nil {
			arg2 = args[2].(*entity.Order)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockOrderRepository_Take_Call) Return(err error) *MockOrderRepository_Take_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockOrderRepository_Take_Call) RunAndReturn(run func(context1 context.Context, dB *gorm.DB, order *entity.Order) error) *MockOrderRepository_Take_Call {
	_c.Call.Return(run)
	return _c
}

// TakeForUpdate provides a mock function for the type MockOrderRepository
func (_mock *MockOrderRepository) TakeForUpdate(context1 context.Context, dB *gorm.DB, order *entity.Order) error {
	ret := _mock.Called(context1, dB, order)

	if len(ret) == 0 {
		panic("no return value specified for TakeForUpdate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *gorm.DB, *entity.Order) error); ok {
		r0 = returnFunc(context1, dB, order)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockOrderRepository_TakeForUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TakeForUpdate'
type MockOrderRepository_TakeForUpdate_Call struct {
	*mock.Call
}

// TakeForUpdate is a helper method to define mock.On call
//   - context1 context.Context
//   - dB *gorm.DB
//   - order *entity.Order
func (_e *MockOrderRepository_Expecter) TakeForUpdate(context1 interface{}, dB interface{}, order interface{}) *MockOrderRepository_TakeForUpdate_Call {
	return &MockOrderRepository_TakeForUpdate_Call{Call: _e.mock.On("TakeForUpdate", context1, dB, order)}
}

func (_c *MockOrderRepository_TakeForUpdate_Call) Run(run func(context1 context.Context, dB *gorm.DB, order *entity.Order)) *MockOrderRepository_TakeForUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *gorm.DB
		if args[1] != nil {
			arg1 = args[1].(*gorm.DB)
		}
		var arg2 *entity.Order
		if args[2] != nil {
			arg2 = args[2].(*entity.Order)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockOrderRepository_TakeForUpdate_Call) Return(err error) *MockOrderRepository_TakeForUpdate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockOrderRepository_TakeForUpdate_Call) RunAndReturn(run func(context1 context.Context, dB *gorm.DB, order *entity.Order) error) *MockOrderRepository_TakeForUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// TakeWithDetailOrder provides a mock function for the type MockOrderRepository
func (_mock *MockOrderRepository) TakeWithDetailOrder(context1 context.Context, dB *gorm.DB, order *entity.Order) error {
	ret := _mock.Called(context1, dB, order)

	if len(ret) == 0 {
		panic("no return value specified for TakeWithDetailOrder")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *gorm.DB, *entity.Order) error); ok {
		r0 = returnFunc(context1, dB, order)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockOrderRepository_TakeWithDetailOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TakeWithDetailOrder'
type MockOrderRepository_TakeWithDetailOrder_Call struct {
	*mock.Call
}

// TakeWithDetailOrder is a helper method to define mock.On call
//   - context1 context.Context
//   - dB *gorm.DB
//   - order *entity.Order
func (_e *MockOrderRepository_Expecter) TakeWithDetailOrder(context1 interface{}, dB interface{}, order interface{}) *MockOrderRepository_TakeWithDetailOrder_Call {
	return &MockOrderRepository_TakeWithDetailOrder_Call{Call: _e.mock.On("TakeWithDetailOrder", context1, dB, order)}
}

func (_c *MockOrderRepository_TakeWithDetailOrder_Call) Run(run func(context1 context.Context, dB *gorm.DB, order *entity.Order)) *MockOrderRepository_TakeWithDetailOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *gorm.DB
		if args[1] != nil {
			arg1 = args[1].(*gorm.DB)
		}
		var arg2 *entity.Order
		if args[2] != nil {
			arg2 = args[2].(*entity.Order)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockOrderRepository_TakeWithDetailOrder_Call) Return(err error) *MockOrderRepository_TakeWithDetailOrder_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockOrderRepository_TakeWithDetailOrder_Call) RunAndReturn(run func(context1 context.Context, dB *gorm.DB, order *entity.Order) error) *MockOrderRepository_TakeWithDetailOrder_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockOrderRepository
func (_mock *MockOrderRepository) Update(context1 context.Context, dB *gorm.DB, order *entity.Order) error {
	ret := _mock.Called(context1, dB, order)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *gorm.DB, *entity.Order) error); ok {
		r0 = returnFunc(context1, dB, order)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockOrderRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockOrderRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - context1 context.Context
//   - dB *gorm.DB
//   - order *entity.Order
func (_e *MockOrderRepository_Expecter) Update(context1 interface{}, dB interface{}, order interface{}) *MockOrderRepository_Update_Call {
	return &MockOrderRepository_Update_Call{Call: _e.mock.On("Update", context1, dB, order)}
}

func (_c *MockOrderRepository_Update_Call) Run(run func(context1 context.Context, dB *gorm.DB, order *entity.Order)) *MockOrderRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *gorm.DB
		if args[1] != nil {
			arg1 = args[1].(*gorm.DB)
		}
		var arg2 *entity.Order
		if args[2] != nil {
			arg2 = args[2].(*entity.Order)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockOrderRepository_Update_Call) Return(err error) *MockOrderRepository_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockOrderRepository_Update_Call) RunAndReturn(run func(context1 context.Context, dB *gorm.DB, order *entity.Order) error) *MockOrderRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}
